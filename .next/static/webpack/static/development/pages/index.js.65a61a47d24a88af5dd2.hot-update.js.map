{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.65a61a47d24a88af5dd2.hot-update.js","sources":["webpack:///./components/Home.js"],"sourcesContent":["\r\nimport React from 'react';\r\nimport { withRouter } from 'next/router';\r\nimport { connect } from 'react-redux';\r\nimport { Dropdown, Menu, Segment, Grid, Container, Input, Header, Button, Divider } from 'semantic-ui-react';\r\nimport Axios from 'axios';\r\nimport { FaExchangeAlt } from \"react-icons/fa\";\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            totalData: [],\r\n            options: [],\r\n            firstCurr: '',\r\n            secondCurr: '',\r\n            firstValue: 0,\r\n            secondValue: 0,\r\n            date: '',\r\n            exchangeData: [],\r\n            spinner: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"header\");\r\n        const { totalData } = this.state;\r\n        const options = [];\r\n\r\n        let date = new Date();\r\n        date.setDate(date.getDate() - 1);\r\n        console.log(\"date \", date);\r\n        date = date.toISOString().split('T')[0];\r\n        console.log(\"after-date \", date);\r\n        this.setState({\r\n            date\r\n        })\r\n        Axios.get('https://restcountries.eu/rest/v2/all').then(({ data }) => {\r\n            this.setState({\r\n                totalData: data\r\n            });\r\n            data.forEach((country, i) => {\r\n                options.push(\r\n                    {\r\n                        key: i, text: country.name + \" \" + \"(\" + country.currencies[0].code + \")\", value: country.currencies[0].code\r\n                    }\r\n                )\r\n            })\r\n            this.setState({\r\n                options\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    firstDD = (event, { value }) => {\r\n        const { firstCurr, secondCurr, date } = this.state;\r\n        console.log(\"firstDD\", event.target, { value });\r\n        this.setState({\r\n            firstCurr: value\r\n        })\r\n        if ({ value } !== '' && secondCurr !== '') {\r\n            Axios.get(`https://api.ratesapi.io/api/latest?symbols=${secondCurr}&base=${value}`\r\n            ).then((res) => {\r\n                console.log(\"res \", res);\r\n                this.setState({\r\n                    exchangeData: res.data\r\n                })\r\n            })\r\n                .catch((error) => { console.log(error); });\r\n        }\r\n    }\r\n\r\n    secondDD = (event, { value }) => {\r\n        const { firstCurr, secondCurr, date } = this.state;\r\n        console.log(\"secondDD\", value);\r\n        this.setState({\r\n            secondCurr: value\r\n        })\r\n\r\n        if (firstCurr !== '' && { value } !== '') {\r\n            Axios.get(\r\n                `https://api.ratesapi.io/api/latest?symbols=${value}&base=${firstCurr}`\r\n            ).then((res) => {\r\n                console.log(\"res \", res);\r\n                this.setState({\r\n                    exchangeData: res.data\r\n                })\r\n            })\r\n                .catch((error) => { console.log(error); });\r\n        }\r\n    }\r\n\r\n    firstValue = (event) => {\r\n        console.log(\"firstValue\", event.target.value);\r\n        this.setState({\r\n            firstValue: event.target.value\r\n        })\r\n        const calc2 = (event.target.value) * (this.state.exchangeData.rates[this.state.secondCurr]);\r\n        console.log(\"calc2 \", calc2)\r\n        this.setState({\r\n            secondValue: calc2\r\n        })\r\n    }\r\n\r\n    secondValue = (event) => {\r\n        console.log(\"secondValue\", event.target.value);\r\n        this.setState({\r\n            secondValue: event.target.value\r\n        })\r\n        const calc1 = (event.target.value) / (this.state.exchangeData.rates[this.state.secondCurr]);\r\n        console.log(\"calc1 \", calc1);\r\n        this.setState({\r\n            firstValue: calc1\r\n        })\r\n    }\r\n\r\n    onExchangeClick = () => {\r\n        const { firstCurr, secondCurr, firstValue, secondValue } = this.state;\r\n        this.setState({\r\n            spinner: true\r\n        })\r\n        let firstCurrConst = firstCurr;\r\n        let secondCurrConst = secondCurr;\r\n        let firstValueConst = firstValue;\r\n        let secondValueConst = secondValue;\r\n\r\n        Axios.get(`https://api.ratesapi.io/api/latest?symbols=${firstCurr}&base=${secondCurr}`\r\n            ).then((res) => {\r\n                console.log(\"res \", res);\r\n                this.setState({\r\n                    exchangeData: res.data, spinner: false\r\n                })\r\n            })\r\n                .catch((error) => { console.log(error); });\r\n\r\n\r\n        this.setState({\r\n            firstCurr: secondCurrConst, secondCurr: firstCurrConst, firstValue: secondValueConst, secondValue: firstValueConst\r\n        })\r\n    }\r\n\r\n    moreConversions = (x, y, multiplyValue) => {\r\n        console.log(\"x,y \", x, y, multiplyValue);\r\n        const num = [1, 5, 10, 25, 50, 100, 500, 1000, 5000, 10000];\r\n        const loop = [];\r\n        for (let i = 0; i < num.length; i++) {\r\n            loop.push(\r\n                <Grid.Row textAlign=\"center\" key={i}>\r\n                    <Grid.Column width={8}>\r\n                        <Header>\r\n                            {num[i]}{\"  \"}{x}\r\n                        </Header>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={8}>\r\n                        <Header>\r\n                            {(num[i] * multiplyValue).toFixed(3)}\r\n                        </Header>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            )\r\n        }\r\n        return loop;\r\n    }\r\n\r\n    render() {\r\n        const { firstCurr, secondCurr, exchangeData } = this.state;\r\n        console.log(\"home\")\r\n        return (\r\n            <Container>\r\n                <Segment.Group>\r\n                    <Segment clearing inverted color=\"violet\">\r\n                        <Grid>\r\n                            <Grid.Row>\r\n                                <Grid.Column textAlign=\"center\" width={7}>\r\n                                    <Dropdown placeholder=\"select\" options={this.state.options} selection clearable search onChange={(e, { value }) => this.firstDD(e, { value })} value={this.state.firstCurr} />\r\n                                </Grid.Column>\r\n                                <Grid.Column textAlign=\"center\" verticalAlign=\"middle\" width={2}>\r\n                                    <FaExchangeAlt onClick={this.onExchangeClick} style={{ cursor: \"pointer\" }} />\r\n                                </Grid.Column>\r\n                                <Grid.Column textAlign=\"center\" width={7}>\r\n                                    <Dropdown placeholder=\"select\" options={this.state.options} selection clearable search onChange={this.secondDD} value={this.state.secondCurr} />\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Grid>\r\n                            <Grid.Row>\r\n                                <Grid.Column textAlign=\"center\" width={7}>\r\n                                    <Input onChange={this.firstValue} value={this.state.firstValue} />\r\n                                </Grid.Column>\r\n                                <Grid.Column textAlign=\"center\" verticalAlign=\"middle\" width={2}>\r\n                                    <FaExchangeAlt onClick={this.onExchangeClick} style={{ cursor: \"pointer\" }} />\r\n                                </Grid.Column>\r\n                                <Grid.Column textAlign=\"center\" width={7}>\r\n                                    <Input onChange={this.secondValue} value={this.state.secondValue} />\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Segment>\r\n                </Segment.Group>\r\n                {\r\n                                this.state.spinner ?\r\n                                <Segment loading />\r\n                                :\r\n                <Segment.Group horizontal>\r\n                    <Segment>\r\n                        {\r\n                            firstCurr !== '' && secondCurr !== ''\r\n                                ?\r\n                                <Header attached='top' as='h3' textAlign='center' block>\r\n                                    Convert {firstCurr} to {secondCurr}\r\n                                </Header>\r\n                                :\r\n\r\n                                <Header attached='top' as='h3' textAlign='center' block>\r\n                                    Select any 2 currencies\r\n                    </Header>\r\n                        }\r\n                        <Segment attached>\r\n                            \r\n                            <Grid divided>\r\n                                <Grid.Row>\r\n                                    <Grid.Column width={8}>\r\n                                        <Header as=\"h3\" textAlign=\"center\">\r\n                                            {firstCurr}\r\n                                        </Header>\r\n                                    </Grid.Column>\r\n                                    <Grid.Column width={8}>\r\n                                        <Header as=\"h3\" textAlign=\"center\">\r\n                                            {secondCurr}\r\n                                        </Header>\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                                <Divider />\r\n                                {\r\n                                    exchangeData.rates\r\n                                        ?\r\n                                        this.moreConversions(firstCurr, secondCurr, exchangeData.rates[this.state.secondCurr])\r\n                                        :\r\n                                        null\r\n                                }\r\n                            </Grid>\r\n                            \r\n                        </Segment>\r\n                    </Segment>\r\n                    <Segment>\r\n                        {\r\n                            firstCurr !== '' && secondCurr !== ''\r\n                                ?\r\n                                <Header attached='top' as='h3' textAlign='center' block>\r\n                                    Convert {firstCurr} to {secondCurr}\r\n                                </Header>\r\n                                :\r\n\r\n                                <Header attached='top' as='h3' textAlign='center' block>\r\n                                    Select any 2 currencies\r\n                    </Header>\r\n                        }\r\n                        <Segment attached>\r\n                            <Grid divided>\r\n                                <Grid.Row textAlign=\"center\">\r\n                                    <Grid.Column width={8}>\r\n                                        <Header as=\"h3\" textAlign=\"center\">\r\n                                            {secondCurr}\r\n                                        </Header>\r\n                                    </Grid.Column>\r\n                                    <Grid.Column width={8}>\r\n                                        <Header as=\"h3\" textAlign=\"center\">\r\n                                            {firstCurr}\r\n                                        </Header>\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                                <Divider />\r\n                                {\r\n                                    exchangeData.rates\r\n                                        ?\r\n                                        this.moreConversions(firstCurr, secondCurr, 1 / (exchangeData.rates[this.state.secondCurr]))\r\n                                        :\r\n                                        null\r\n                                }\r\n                            </Grid>\r\n                        </Segment>\r\n                    </Segment>\r\n                </Segment.Group>\r\n    }\r\n            </Container>\r\n        );\r\n    }\r\n}\r\nconst mapDispatchToProps = {};\r\nexport default withRouter(Home);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA8CA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AA/DA;AAgEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAnFA;AAqFA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA/FA;AAiGA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA3GA;AA4GA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AADA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AApIA;AAsIA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAAA;AACA;AACA;AAzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAFA;AAaA;AACA;;;AACA;AAAA;AACA;AAAA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AADA;AAIA;AACA;;;AAgeA;;;;AAzRA;AACA;AA0RA;AACA;;;;A","sourceRoot":""}