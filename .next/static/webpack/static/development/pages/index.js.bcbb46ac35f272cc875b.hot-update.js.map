{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.bcbb46ac35f272cc875b.hot-update.js","sources":["webpack:///./components/Home.js"],"sourcesContent":["\r\nimport React from 'react';\r\nimport { withRouter } from 'next/router';\r\nimport { connect } from 'react-redux';\r\nimport { Dropdown, Menu, Segment, Grid, Container, Input, Icon, Button } from 'semantic-ui-react';\r\nimport Axios from 'axios';\r\nimport { FaExchangeAlt } from \"react-icons/fa\";\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            totalData: [],\r\n            options: [],\r\n            firstCurr: '',\r\n            secondCurr: '',\r\n            firstValue: 0,\r\n            secondValue: 0,\r\n            date: '',\r\n            exchangeData: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"header\");\r\n        const { totalData } = this.state;\r\n        const options = [];\r\n\r\n        let date = new Date();\r\n        date.setDate(date.getDate() - 1);\r\n        console.log(\"date \", date);\r\n        date = date.toISOString().split('T')[0];\r\n        console.log(\"after-date \", date);\r\n        this.setState({\r\n            date\r\n        })\r\n        Axios.get('https://restcountries.eu/rest/v2/all').then(({ data }) => {\r\n            this.setState({\r\n                totalData: data\r\n            });\r\n            data.forEach((country, i) => {\r\n                options.push(\r\n                    {\r\n                        key: i, text: country.name + \" \" + \"(\" + country.currencies[0].code + \")\", value: country.currencies[0].code\r\n                    }\r\n                )\r\n            })\r\n            this.setState({\r\n                options\r\n            })\r\n\r\n        })\r\n    }\r\n\r\n    firstDD = (event, { value }) => {\r\n        const { firstCurr, secondCurr,date } = this.state;\r\n        console.log(\"firstDD\", event.target, { value });\r\n        this.setState({\r\n            firstCurr: value\r\n        })\r\n        if ({value} !== '' && secondCurr !== '') {\r\n            Axios.get(`https://api.exchangeratesapi.io/latest?symbols=${value},${secondCurr}&base=${value}`\r\n            ).then((res) => {\r\n                console.log(\"res \", res);\r\n                this.setState({\r\n                    exchangeData: res.data\r\n                })\r\n            })\r\n            .catch((error) => { console.log(error); });\r\n        }\r\n    }\r\n\r\n        secondDD = (event, { value }) => {\r\n            const { firstCurr, secondCurr,date } = this.state;\r\n            console.log(\"secondDD\", value);\r\n            this.setState({\r\n                secondCurr: value\r\n            })\r\n\r\n            if (firstCurr !== '' && {value} !== '') {\r\n                Axios.get(\r\n                    `https://api.ratesapi.io/api/latest?symbols=${firstCurr},${value}&base=${firstCurr}`\r\n                    ).then((res) => {\r\n                    console.log(\"res \", res);\r\n                    this.setState({\r\n                        exchangeData: res.data\r\n                    })\r\n                })\r\n                .catch((error) => { console.log(error); });\r\n            }\r\n        }\r\n\r\n        firstValue = (event) => {\r\n            console.log(\"firstValue\", event.target.value);\r\n            this.setState({\r\n                firstValue: event.target.value\r\n            })\r\n            const calc2 = (event.target.value)*(this.state.exchangeData.rates[this.state.secondCurr]);\r\n            console.log(\"calc2 \", calc2)\r\n            this.setState({\r\n                secondValue: calc2\r\n            })\r\n        }\r\n\r\n        secondValue = (event) => {\r\n            console.log(\"secondValue\", event.target.value);\r\n            this.setState({\r\n                secondValue: event.target.value\r\n            })\r\n            const calc1 = (event.target.value)/(this.state.exchangeData.rates[this.state.secondCurr]);\r\n            console.log(\"calc1 \", calc1);\r\n            this.setState({\r\n                firstValue: calc1\r\n            })\r\n        }\r\n\r\n        render() {\r\n            console.log(\"home\")\r\n            return (\r\n                <Container>\r\n                    <Segment.Group>\r\n                        <Segment clearing inverted color=\"violet\">\r\n                            <Grid>\r\n                                <Grid.Row>\r\n                                    <Grid.Column textAlign=\"center\" width={7}>\r\n                                        <Dropdown placeholder=\"select\" options={this.state.options} selection clearable search onChange={(e, { value }) => this.firstDD(e, { value })} />\r\n                                    </Grid.Column>\r\n                                    <Grid.Column textAlign=\"center\" verticalAlign=\"middle\" width={2}>\r\n                                        <FaExchangeAlt />\r\n                                    </Grid.Column>\r\n                                    <Grid.Column textAlign=\"center\" width={7}>\r\n                                        <Dropdown placeholder=\"select\" options={this.state.options} selection clearable search onChange={this.secondDD} />\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                            </Grid>\r\n                        </Segment>\r\n                        <Segment>\r\n                            <Grid>\r\n                                <Grid.Row>\r\n                                    <Grid.Column textAlign=\"center\" width={7}>\r\n                                        <Input onChange={this.firstValue} value={this.state.firstValue}/>\r\n                                    </Grid.Column>\r\n                                    <Grid.Column textAlign=\"center\" verticalAlign=\"middle\" width={2}>\r\n                                        <Button icon>\r\n                                            <FaExchangeAlt />\r\n                                        </Button>\r\n                                    </Grid.Column>\r\n                                    <Grid.Column textAlign=\"center\" width={7}>\r\n                                        <Input onChange={this.secondValue} value={this.state.secondValue}/>\r\n                                    </Grid.Column>\r\n                                </Grid.Row>\r\n                            </Grid>\r\n                        </Segment>\r\n                    </Segment.Group>\r\n                </Container>\r\n            );\r\n        }\r\n    }\r\n    const options = [\r\n        { key: 1, text: 'Feet', value: 1 },\r\n        { key: 2, text: 'Meter', value: 2 },\r\n        { key: 3, text: 'Inch', value: 3 },\r\n    ]\r\n    const mapDispatchToProps = {};\r\n    export default withRouter(Home);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA6CA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AA9DA;AA+DA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAlFA;AAoFA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA9FA;AAgGA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAFA;AAYA;AACA;;;AACA;AAAA;AACA;AAAA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AACA;AADA;AAIA;AACA;;;AAgpJA;AACA;AAqJA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;;;A","sourceRoot":""}